import{a as le,c as pe}from"./chunk-K5HBSDBC.js";import{d as b,e as ue,f as de}from"./chunk-NT3CN7HG.js";import{createServices as we}from"@dfinity/utils";var _e=({IDL:e})=>{let r=e.Vec(e.Nat8),t=e.Record({owner:e.Principal,subaccount:e.Opt(r)}),a=e.Record({icrc2:e.Bool}),i=e.Record({maximum_number_of_accounts:e.Opt(e.Nat64),icrc1_minting_account:e.Opt(t),feature_flags:e.Opt(a)}),c=e.Record({e8s:e.Nat64}),u=e.Text,g=e.Record({secs:e.Nat64,nanos:e.Nat32}),x=e.Record({num_blocks_to_archive:e.Nat64,max_transactions_per_response:e.Opt(e.Nat64),trigger_threshold:e.Nat64,max_message_size_bytes:e.Opt(e.Nat64),cycles_for_archive_creation:e.Opt(e.Nat64),node_max_memory_size_bytes:e.Opt(e.Nat64),controller_id:e.Principal}),h=e.Record({send_whitelist:e.Vec(e.Principal),token_symbol:e.Opt(e.Text),transfer_fee:e.Opt(c),minting_account:u,maximum_number_of_accounts:e.Opt(e.Nat64),accounts_overflow_trim_quantity:e.Opt(e.Nat64),transaction_window:e.Opt(g),max_message_size_bytes:e.Opt(e.Nat64),icrc1_minting_account:e.Opt(t),archive_options:e.Opt(x),initial_values:e.Vec(e.Tuple(u,c)),token_name:e.Opt(e.Text),feature_flags:e.Opt(a)}),q=e.Variant({Upgrade:e.Opt(i),Init:h}),o=e.Vec(e.Nat8),_=e.Record({account:o}),T=e.Record({account:u}),y=e.Record({canister_id:e.Principal}),p=e.Record({archives:e.Vec(y)}),n=e.Nat,P=e.Variant({Int:e.Int,Nat:e.Nat,Blob:e.Vec(e.Nat8),Text:e.Text}),d=e.Nat64,C=e.Record({to:t,fee:e.Opt(n),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(r),created_at_time:e.Opt(d),amount:n}),l=e.Nat,S=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,BadBurn:e.Record({min_burn_amount:n}),Duplicate:e.Record({duplicate_of:l}),BadFee:e.Record({expected_fee:n}),CreatedInFuture:e.Record({ledger_time:e.Nat64}),TooOld:e.Null,InsufficientFunds:e.Record({balance:n})}),U=e.Variant({Ok:l,Err:S}),z=e.Record({account:t,spender:t}),M=e.Record({allowance:n,expires_at:e.Opt(d)}),H=e.Record({fee:e.Opt(n),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(r),created_at_time:e.Opt(d),amount:n,expected_allowance:e.Opt(n),expires_at:e.Opt(d),spender:t}),G=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,Duplicate:e.Record({duplicate_of:l}),BadFee:e.Record({expected_fee:n}),AllowanceChanged:e.Record({current_allowance:n}),CreatedInFuture:e.Record({ledger_time:e.Nat64}),TooOld:e.Null,Expired:e.Record({ledger_time:e.Nat64}),InsufficientFunds:e.Record({balance:n})}),Q=e.Variant({Ok:l,Err:G}),W=e.Record({to:t,fee:e.Opt(n),spender_subaccount:e.Opt(r),from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(d),amount:n}),J=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,InsufficientAllowance:e.Record({allowance:n}),BadBurn:e.Record({min_burn_amount:n}),Duplicate:e.Record({duplicate_of:l}),BadFee:e.Record({expected_fee:n}),CreatedInFuture:e.Record({ledger_time:d}),TooOld:e.Null,InsufficientFunds:e.Record({balance:n})}),$=e.Variant({Ok:l,Err:J}),s=e.Nat64,R=e.Record({start:s,length:e.Nat64}),O=e.Nat64,m=e.Record({timestamp_nanos:e.Nat64}),j=e.Variant({Approve:e.Record({fee:c,from:o,allowance_e8s:e.Int,allowance:c,expected_allowance:e.Opt(c),expires_at:e.Opt(m),spender:o}),Burn:e.Record({from:o,amount:c,spender:e.Opt(o)}),Mint:e.Record({to:o,amount:c}),Transfer:e.Record({to:o,fee:c,from:o,amount:c,spender:e.Opt(e.Vec(e.Nat8))})}),K=e.Record({memo:O,icrc1_memo:e.Opt(e.Vec(e.Nat8)),operation:e.Opt(j),created_at_time:m}),F=e.Record({transaction:K,timestamp:m,parent_hash:e.Opt(e.Vec(e.Nat8))}),Y=e.Record({blocks:e.Vec(F)}),w=e.Variant({BadFirstBlockIndex:e.Record({requested_index:s,first_valid_index:s}),Other:e.Record({error_message:e.Text,error_code:e.Nat64})}),X=e.Variant({Ok:Y,Err:w}),Z=e.Func([R],[X],[]),I=e.Record({callback:Z,start:s,length:e.Nat64}),D=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),blocks:e.Vec(F),chain_length:e.Nat64,first_block_index:s,archived_blocks:e.Vec(I)}),L=e.Record({callback:e.Func([R],[e.Variant({Ok:e.Vec(e.Vec(e.Nat8)),Err:w})],[]),start:e.Nat64,length:e.Nat64}),ee=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),blocks:e.Vec(e.Vec(e.Nat8)),chain_length:e.Nat64,first_block_index:e.Nat64,archived_blocks:e.Vec(L)}),te=e.Record({to:u,fee:c,memo:O,from_subaccount:e.Opt(r),created_at_time:e.Opt(m),amount:c}),re=e.Record({to:o,fee:c,memo:O,from_subaccount:e.Opt(r),created_at_time:e.Opt(m),amount:c}),ce=e.Variant({TxTooOld:e.Record({allowed_window_nanos:e.Nat64}),BadFee:e.Record({expected_fee:c}),TxDuplicate:e.Record({duplicate_of:s}),TxCreatedInFuture:e.Null,InsufficientFunds:e.Record({balance:c})}),ne=e.Variant({Ok:s,Err:ce}),ae=e.Record({}),oe=e.Record({transfer_fee:c});return e.Service({account_balance:e.Func([_],[c],[]),account_balance_dfx:e.Func([T],[c],[]),account_identifier:e.Func([t],[o],[]),archives:e.Func([],[p],[]),decimals:e.Func([],[e.Record({decimals:e.Nat32})],[]),icrc1_balance_of:e.Func([t],[n],[]),icrc1_decimals:e.Func([],[e.Nat8],[]),icrc1_fee:e.Func([],[n],[]),icrc1_metadata:e.Func([],[e.Vec(e.Tuple(e.Text,P))],[]),icrc1_minting_account:e.Func([],[e.Opt(t)],[]),icrc1_name:e.Func([],[e.Text],[]),icrc1_supported_standards:e.Func([],[e.Vec(e.Record({url:e.Text,name:e.Text}))],[]),icrc1_symbol:e.Func([],[e.Text],[]),icrc1_total_supply:e.Func([],[n],[]),icrc1_transfer:e.Func([C],[U],[]),icrc2_allowance:e.Func([z],[M],[]),icrc2_approve:e.Func([H],[Q],[]),icrc2_transfer_from:e.Func([W],[$],[]),name:e.Func([],[e.Record({name:e.Text})],[]),query_blocks:e.Func([R],[D],[]),query_encoded_blocks:e.Func([R],[ee],[]),send_dfx:e.Func([te],[s],[]),symbol:e.Func([],[e.Record({symbol:e.Text})],[]),transfer:e.Func([re],[ne],[]),transfer_fee:e.Func([ae],[oe],[])})};var me=({IDL:e})=>{let r=e.Vec(e.Nat8),t=e.Record({owner:e.Principal,subaccount:e.Opt(r)}),a=e.Record({icrc2:e.Bool}),i=e.Record({maximum_number_of_accounts:e.Opt(e.Nat64),icrc1_minting_account:e.Opt(t),feature_flags:e.Opt(a)}),c=e.Record({e8s:e.Nat64}),u=e.Text,g=e.Record({secs:e.Nat64,nanos:e.Nat32}),x=e.Record({num_blocks_to_archive:e.Nat64,max_transactions_per_response:e.Opt(e.Nat64),trigger_threshold:e.Nat64,max_message_size_bytes:e.Opt(e.Nat64),cycles_for_archive_creation:e.Opt(e.Nat64),node_max_memory_size_bytes:e.Opt(e.Nat64),controller_id:e.Principal}),h=e.Record({send_whitelist:e.Vec(e.Principal),token_symbol:e.Opt(e.Text),transfer_fee:e.Opt(c),minting_account:u,maximum_number_of_accounts:e.Opt(e.Nat64),accounts_overflow_trim_quantity:e.Opt(e.Nat64),transaction_window:e.Opt(g),max_message_size_bytes:e.Opt(e.Nat64),icrc1_minting_account:e.Opt(t),archive_options:e.Opt(x),initial_values:e.Vec(e.Tuple(u,c)),token_name:e.Opt(e.Text),feature_flags:e.Opt(a)}),q=e.Variant({Upgrade:e.Opt(i),Init:h}),o=e.Vec(e.Nat8),_=e.Record({account:o}),T=e.Record({account:u}),y=e.Record({canister_id:e.Principal}),p=e.Record({archives:e.Vec(y)}),n=e.Nat,P=e.Variant({Int:e.Int,Nat:e.Nat,Blob:e.Vec(e.Nat8),Text:e.Text}),d=e.Nat64,C=e.Record({to:t,fee:e.Opt(n),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(r),created_at_time:e.Opt(d),amount:n}),l=e.Nat,S=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,BadBurn:e.Record({min_burn_amount:n}),Duplicate:e.Record({duplicate_of:l}),BadFee:e.Record({expected_fee:n}),CreatedInFuture:e.Record({ledger_time:e.Nat64}),TooOld:e.Null,InsufficientFunds:e.Record({balance:n})}),U=e.Variant({Ok:l,Err:S}),z=e.Record({account:t,spender:t}),M=e.Record({allowance:n,expires_at:e.Opt(d)}),H=e.Record({fee:e.Opt(n),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(r),created_at_time:e.Opt(d),amount:n,expected_allowance:e.Opt(n),expires_at:e.Opt(d),spender:t}),G=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,Duplicate:e.Record({duplicate_of:l}),BadFee:e.Record({expected_fee:n}),AllowanceChanged:e.Record({current_allowance:n}),CreatedInFuture:e.Record({ledger_time:e.Nat64}),TooOld:e.Null,Expired:e.Record({ledger_time:e.Nat64}),InsufficientFunds:e.Record({balance:n})}),Q=e.Variant({Ok:l,Err:G}),W=e.Record({to:t,fee:e.Opt(n),spender_subaccount:e.Opt(r),from:t,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(d),amount:n}),J=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,InsufficientAllowance:e.Record({allowance:n}),BadBurn:e.Record({min_burn_amount:n}),Duplicate:e.Record({duplicate_of:l}),BadFee:e.Record({expected_fee:n}),CreatedInFuture:e.Record({ledger_time:d}),TooOld:e.Null,InsufficientFunds:e.Record({balance:n})}),$=e.Variant({Ok:l,Err:J}),s=e.Nat64,R=e.Record({start:s,length:e.Nat64}),O=e.Nat64,m=e.Record({timestamp_nanos:e.Nat64}),j=e.Variant({Approve:e.Record({fee:c,from:o,allowance_e8s:e.Int,allowance:c,expected_allowance:e.Opt(c),expires_at:e.Opt(m),spender:o}),Burn:e.Record({from:o,amount:c,spender:e.Opt(o)}),Mint:e.Record({to:o,amount:c}),Transfer:e.Record({to:o,fee:c,from:o,amount:c,spender:e.Opt(e.Vec(e.Nat8))})}),K=e.Record({memo:O,icrc1_memo:e.Opt(e.Vec(e.Nat8)),operation:e.Opt(j),created_at_time:m}),F=e.Record({transaction:K,timestamp:m,parent_hash:e.Opt(e.Vec(e.Nat8))}),Y=e.Record({blocks:e.Vec(F)}),w=e.Variant({BadFirstBlockIndex:e.Record({requested_index:s,first_valid_index:s}),Other:e.Record({error_message:e.Text,error_code:e.Nat64})}),X=e.Variant({Ok:Y,Err:w}),Z=e.Func([R],[X],["query"]),I=e.Record({callback:Z,start:s,length:e.Nat64}),D=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),blocks:e.Vec(F),chain_length:e.Nat64,first_block_index:s,archived_blocks:e.Vec(I)}),L=e.Record({callback:e.Func([R],[e.Variant({Ok:e.Vec(e.Vec(e.Nat8)),Err:w})],["query"]),start:e.Nat64,length:e.Nat64}),ee=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),blocks:e.Vec(e.Vec(e.Nat8)),chain_length:e.Nat64,first_block_index:e.Nat64,archived_blocks:e.Vec(L)}),te=e.Record({to:u,fee:c,memo:O,from_subaccount:e.Opt(r),created_at_time:e.Opt(m),amount:c}),re=e.Record({to:o,fee:c,memo:O,from_subaccount:e.Opt(r),created_at_time:e.Opt(m),amount:c}),ce=e.Variant({TxTooOld:e.Record({allowed_window_nanos:e.Nat64}),BadFee:e.Record({expected_fee:c}),TxDuplicate:e.Record({duplicate_of:s}),TxCreatedInFuture:e.Null,InsufficientFunds:e.Record({balance:c})}),ne=e.Variant({Ok:s,Err:ce}),ae=e.Record({}),oe=e.Record({transfer_fee:c});return e.Service({account_balance:e.Func([_],[c],["query"]),account_balance_dfx:e.Func([T],[c],["query"]),account_identifier:e.Func([t],[o],["query"]),archives:e.Func([],[p],["query"]),decimals:e.Func([],[e.Record({decimals:e.Nat32})],["query"]),icrc1_balance_of:e.Func([t],[n],["query"]),icrc1_decimals:e.Func([],[e.Nat8],["query"]),icrc1_fee:e.Func([],[n],["query"]),icrc1_metadata:e.Func([],[e.Vec(e.Tuple(e.Text,P))],["query"]),icrc1_minting_account:e.Func([],[e.Opt(t)],["query"]),icrc1_name:e.Func([],[e.Text],["query"]),icrc1_supported_standards:e.Func([],[e.Vec(e.Record({url:e.Text,name:e.Text}))],["query"]),icrc1_symbol:e.Func([],[e.Text],["query"]),icrc1_total_supply:e.Func([],[n],["query"]),icrc1_transfer:e.Func([C],[U],[]),icrc2_allowance:e.Func([z],[M],["query"]),icrc2_approve:e.Func([H],[Q],[]),icrc2_transfer_from:e.Func([W],[$],[]),name:e.Func([],[e.Record({name:e.Text})],["query"]),query_blocks:e.Func([R],[D],["query"]),query_encoded_blocks:e.Func([R],[ee],["query"]),send_dfx:e.Func([te],[s],[]),symbol:e.Func([],[e.Record({symbol:e.Text})],["query"]),transfer:e.Func([re],[ne],[]),transfer_fee:e.Func([ae],[oe],["query"])})};import{arrayOfNumberToUint8Array as he,toNullable as B}from"@dfinity/utils";var ke=BigInt(1095062083),Ve=BigInt(1347768404),N=BigInt(1e4),Be=BigInt(1e8);var Re=async e=>{let r=new Uint8Array(e).buffer,{Subaccount:t}=await b(),a=new t;return a.setSubAccount(new Uint8Array(r)),a},se=async e=>{let{ICPTs:r}=await b(),t=new r;return t.setE8s(e.toString(10)),t},fe=e=>({e8s:e}),ge=({to:e,amount:r,memo:t,fee:a,fromSubAccount:i,createdAt:c})=>({to:e.toUint8Array(),fee:fe(a??N),amount:fe(r),memo:t??BigInt(0),created_at_time:c!==void 0?[{timestamp_nanos:c}]:[],from_subaccount:i===void 0?[]:[he(i)]}),Oe=({fromSubAccount:e,to:r,amount:t,fee:a,icrc1Memo:i,createdAt:c})=>({to:r,fee:B(a??N),amount:t,memo:B(i),created_at_time:B(c),from_subaccount:B(e)});import{convertStringToE8s as Fe}from"@dfinity/utils";var f=class extends Error{},ie=class extends f{},Ne=class extends Error{},A=class extends f{constructor(t){super();this.balance=t}},v=class extends f{constructor(t){super();this.allowed_window_secs=t}},k=class extends f{},V=class extends f{constructor(t){super();this.duplicateOf=t}},E=class extends f{constructor(t){super();this.expectedFee=t}},Te=e=>"TxDuplicate"in e?new V(e.TxDuplicate.duplicate_of):"InsufficientFunds"in e?new A(e.InsufficientFunds.balance.e8s):"TxCreatedInFuture"in e?new k:"TxTooOld"in e?new v(Number(e.TxTooOld.allowed_window_nanos)):"BadFee"in e?new E(e.BadFee.expected_fee.e8s):new f(`Unknown error type ${JSON.stringify(e)}`),ye=e=>"Duplicate"in e?new V(e.Duplicate.duplicate_of):"InsufficientFunds"in e?new A(e.InsufficientFunds.balance):"CreatedInFuture"in e?new k:"TooOld"in e?new v:"BadFee"in e?new E(e.BadFee.expected_fee):new f(`Unknown error type ${JSON.stringify(e)}`),be=e=>{let{message:r}=e;if(r.includes("Reject code: 5")){if(r.match(/Sending from (.*) is not allowed/))return new ie;{let t=r.match(/transaction.*duplicate.* in block (\d+)/);if(t&&t.length>1)return new V(BigInt(t[1]))}{let t=r.match(/debit account.*, current balance: (\d*(\.\d*)?)/);if(t&&t.length>1){let a=Fe(t[1]);if(typeof a=="bigint")return new A(a)}}if(r.includes("is in future"))return new k;{let t=r.match(/older than (\d+)/);if(t&&t.length>1)return new v(Number.parseInt(t[1]))}}throw e};var xe=class e{constructor(r,t,a,i,c,u,g=!1){this.agent=r;this.canisterId=t;this.service=a;this.certifiedService=i;this.updateFetcher=c;this.queryFetcher=u;this.hardwareWallet=g;this.accountBalance=async({accountIdentifier:r,certified:t=!0})=>{let a=pe(r);return this.hardwareWallet?this.accountBalanceHardwareWallet({accountIdentifier:a,certified:t}):(await(t?this.certifiedService:this.service).account_balance({account:a.toUint8Array()})).e8s};this.transactionFee=async()=>{let{transfer_fee:{e8s:r}}=await this.service.transfer_fee({});return r};this.transfer=async r=>{if(this.hardwareWallet)return this.transferHardwareWallet(r);r.fee===void 0&&(r.fee=this.hardwareWallet?N:await this.transactionFee());let t=ge(r),a=await this.certifiedService.transfer(t);if("Err"in a)throw Te(a.Err);return a.Ok};this.icrc1Transfer=async r=>{r.fee===void 0&&(r.fee=this.hardwareWallet?N:await this.transactionFee());let t=Oe(r),a=await this.certifiedService.icrc1_transfer(t);if("Err"in a)throw ye(a.Err);return a.Ok};this.accountBalanceHardwareWallet=async({accountIdentifier:r,certified:t=!0})=>{let a=t?this.updateFetcher:this.queryFetcher,{AccountBalanceRequest:i,ICPTs:c}=await b(),u=new i;u.setAccount(await r.toProto());let g=await a({agent:this.agent,canisterId:this.canisterId,methodName:"account_balance_pb",arg:u.serializeBinary()});return BigInt(c.deserializeBinary(new Uint8Array(g)).getE8s())};this.transferHardwareWallet=async({to:r,amount:t,memo:a,fee:i,fromSubAccount:c,createdAt:u})=>{let{SendRequest:g,Payment:x,Memo:h,TimeStamp:q,BlockHeight:o}=await b(),_=new g;_.setTo(await r.toProto());let T=new x;T.setReceiverGets(await se(t)),_.setPayment(T),_.setMaxFee(await se(i??N));let y=new h;if(y.setMemo((a??BigInt(0)).toString()),_.setMemo(y),u!==void 0){let p=new q;p.setTimestampNanos(u.toString()),_.setCreatedAtTime(p)}c!==void 0&&_.setFromSubaccount(await Re(c));try{let p=await this.updateFetcher({agent:this.agent,canisterId:this.canisterId,methodName:"send_pb",arg:_.serializeBinary()});return BigInt(o.deserializeBinary(p).getHeight())}catch(p){throw p instanceof Error?be(p):p}}}static create(r={}){let t=r.canisterId??le,{service:a,certifiedService:i,agent:c}=we({options:{...r,canisterId:t},idlFactory:me,certifiedIdlFactory:_e});return new e(c,t,a,i,r.updateCallOverride??ue,r.queryCallOverride??de,r.hardwareWallet)}};export{f as a,ie as b,Ne as c,A as d,v as e,k as f,V as g,E as h,Te as i,ye as j,be as k,xe as l};
//# sourceMappingURL=chunk-IGRXF4KV.js.map
