import { InstanceTopology, GetStableMemoryRequest, GetStableMemoryResponse, SetStableMemoryRequest, AddCyclesRequest, AddCyclesResponse, GetCyclesBalanceResponse, GetCyclesBalanceRequest, GetSubnetIdResponse, GetSubnetIdRequest, GetTimeResponse, SetTimeRequest, CanisterCallRequest, CanisterCallResponse, UploadBlobResponse, UploadBlobRequest, CreateInstanceRequest } from './pocket-ic-client-types';
export declare class PocketIcClient {
    private readonly instanceUrl;
    private readonly serverUrl;
    private readonly topology;
    private isInstanceDeleted;
    private constructor();
    static create(url: string, req?: CreateInstanceRequest): Promise<PocketIcClient>;
    private static createInstance;
    deleteInstance(): Promise<void>;
    tick(): Promise<void>;
    fetchRootKey(): Promise<Uint8Array>;
    getTopology(): InstanceTopology;
    getTime(): Promise<GetTimeResponse>;
    setTime(req: SetTimeRequest): Promise<void>;
    getSubnetId(req: GetSubnetIdRequest): Promise<GetSubnetIdResponse>;
    getCyclesBalance(req: GetCyclesBalanceRequest): Promise<GetCyclesBalanceResponse>;
    addCycles(req: AddCyclesRequest): Promise<AddCyclesResponse>;
    uploadBlob(req: UploadBlobRequest): Promise<UploadBlobResponse>;
    setStableMemory(req: SetStableMemoryRequest): Promise<void>;
    getStableMemory(req: GetStableMemoryRequest): Promise<GetStableMemoryResponse>;
    updateCall(req: CanisterCallRequest): Promise<CanisterCallResponse>;
    queryCall(req: CanisterCallRequest): Promise<CanisterCallResponse>;
    private canisterCall;
    private post;
    private get;
    private assertInstanceNotDeleted;
}
