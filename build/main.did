type TransactionStatus = 
 variant {
   expired: TSExpired;
   pending;
   swapped: TSSwapped;
   waiting: TSWaiting;
 };
type TransactionShared = 
 record {
   created: Timestamp;
   expires: Timestamp;
   initiator: principal;
   initiator_collateral: nat;
   maker: Participant;
   maker_amount: nat;
   rate: record {
           max: float64;
           provider: RateProvider;
         };
   status: TransactionStatus;
   taker: Participant;
 };
type TransactionRequest = 
 record {
   expires: Timestamp;
   initiator_collateral: nat;
   maker: ParticipantInput;
   maker_amount: nat;
   rate: record {
           max: float64;
           provider: RateProvider;
         };
   taker: ParticipantInput;
 };
type TransactionId = nat64;
type Timestamp = nat32;
type TSWaiting = 
 record {
   maker_balance: nat;
   provided_rate: float64;
   rate_in_range: bool;
   rate_match: bool;
   requested_rate: float64;
   taker_balance: nat;
   taker_min_calc_required: nat;
 };
type TSSwapped = 
 record {
   collateral_sent: bool;
   final_rate: float64;
   maker_amount: nat;
   maker_distributed: bool;
   taker_amount: nat;
   taker_distributed: bool;
 };
type TSExpired = 
 record {
   collateral_sent: bool;
   maker_refunded: bool;
   taker_refunded: bool;
 };
type Swap = 
 service {
   create_transaction: (TransactionRequest) -> (R);
   get_transaction: (TransactionId) -> (opt TransactionShared) query;
   update_transaction: (TransactionId) -> ();
 };
type RateProvider = variant {xrc: record {
                                    base: text;
                                    quote: text;
                                  };};
type R = 
 variant {
   err: text;
   ok: TransactionId;
 };
type ParticipantInput = 
 record {
   destination: Account;
   ledger: principal;
   owner: principal;
   refund: Account;
 };
type Participant = 
 record {
   destination: Account;
   ledger: principal;
   ledger_decimals: nat;
   ledger_fee: nat;
   ledger_symbol: text;
   owner: principal;
   refund: Account;
   swap: Account;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : () -> Swap
