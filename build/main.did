type UnconfirmedTransactionShared = 
 record {
   amount: nat;
   fee: nat;
   from: Account;
   from_id: DVectorId__1;
   memo: blob;
   timestamp: Timestamp;
   to: Account;
   to_id: DVectorId__1;
   tries: nat;
 };
type Timestamp = nat32;
type Swap = 
 service {
   create_dvector: (DVectorRequest) -> (R);
   get_dvector: (DVectorId) -> (opt DVectorShared) query;
   show_log: () -> (vec text) query;
   stats: () -> (vec nat) query;
 };
type SourceEndpointInput = record {ledger: principal;};
type R = 
 variant {
   err: text;
   ok: DVectorId;
 };
type Endpoint = 
 record {
   address: Account;
   ledger: principal;
   ledger_decimals: nat;
   ledger_fee: nat;
   ledger_symbol: text;
 };
type DestinationEndpointInput = 
 record {
   address: opt Account;
   ledger: principal;
 };
type DVectorShared = 
 record {
   active: bool;
   algorate: AlgoRate;
   amount_available: nat;
   created: Timestamp;
   destination: Endpoint;
   destination_balance: nat;
   owner: principal;
   rate: float64;
   source: Endpoint;
   source_balance: nat;
   unconfirmed_transactions: vec UnconfirmedTransactionShared;
 };
type DVectorRequest = 
 record {
   algorate: AlgoRate;
   destination: DestinationEndpointInput;
   owner: principal;
   source: SourceEndpointInput;
 };
type DVectorId__1 = nat32;
type DVectorId = nat32;
type AlgoRate = 
 record {
   discount: float64;
   max: float64;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : () -> Swap
