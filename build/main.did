type VLocation = 
 variant {
   destination;
   source;
 };
type UnconfirmedTransactionShared = 
 record {
   amount: nat;
   fee: nat;
   from: Account;
   from_id: DVectorId;
   ledger: principal;
   memo: blob;
   timestamp: Timestamp;
   to: Account;
   to_id: opt DVectorId;
   tries: nat;
 };
type TxKind = 
 variant {
   destination_in:
    record {
      amount: nat;
      fee: nat;
      vid: DVectorId;
      vtx_id: opt nat64;
    };
   destination_out: record {
                      amount: nat;
                      fee: nat;
                      vid: DVectorId;
                    };
   source_in: record {
                amount: nat;
                fee: nat;
                vid: DVectorId;
              };
   source_out: record {
                 amount: nat;
                 fee: nat;
                 vid: DVectorId;
               };
   swap:
    record {
      amount: nat;
      fee: nat;
      from: DVectorId;
      rate: float64;
      to: DVectorId;
      vtx_id: nat64;
    };
   tx_sent: record {
              error: bool;
              retry: nat;
              vtx_id: nat64;
            };
   withdraw:
    record {
      amount: nat;
      fee: nat;
      from: DVectorId;
      location: VLocation;
      to: Account;
      vtx_id: nat64;
    };
 };
type TxId = nat;
type Tx = 
 record {
   kind: TxKind;
   timestamp: Timestamp;
 };
type Timestamp = nat32;
type Swap = 
 service {
   create_vector: (DVectorRequest) -> (R_2);
   get_architect_vectors: (record {
                             id: principal;
                             length: nat;
                             start: nat;
                           }) -> (ArchVectorsResult) query;
   get_events: (record {
                  length: nat;
                  start: nat;
                }) -> (R_1) query;
   get_vector: (DVectorId__1) -> (opt DVectorShared) query;
   get_vector_events: (record {
                         id: DVectorId;
                         length: nat;
                         start: nat;
                       }) -> (R_1) query;
   index_pause: (bool) -> ();
   show_log: () -> (vec text) query;
   stats: () -> (vec nat) query;
   withdraw_vector:
    (record {
       amount: nat;
       id: DVectorId;
       location: VLocation;
       to: Account;
     }) -> (R);
 };
type SourceEndpointInput = record {ledger: principal;};
type R_2 = 
 variant {
   err: text;
   ok: DVectorId__1;
 };
type R_1 = 
 variant {
   err: text;
   ok: HistoryResponse;
 };
type R = 
 variant {
   err: text;
   ok: nat64;
 };
type HistoryResponse = 
 record {
   entries: vec record {
                  TxId;
                  Tx;
                };
   total: nat;
 };
type Endpoint = 
 record {
   address: Account;
   ledger: principal;
   ledger_decimals: nat;
   ledger_fee: nat;
   ledger_symbol: text;
 };
type DestinationEndpointInput = 
 record {
   address: opt Account;
   ledger: principal;
 };
type DVectorShared__1 = 
 record {
   active: bool;
   algo: Algo;
   created: Timestamp;
   destination: Endpoint;
   destination_balance: nat;
   destination_rate_usd: float64;
   owner: principal;
   rate: float64;
   source: Endpoint;
   source_balance: nat;
   source_balance_available: nat;
   source_balance_tradable: nat;
   source_balance_tradable_last_update: Timestamp;
   source_rate_usd: float64;
   total_events: nat;
   unconfirmed_transactions: vec UnconfirmedTransactionShared;
 };
type DVectorShared = 
 record {
   active: bool;
   algo: Algo;
   created: Timestamp;
   destination: Endpoint;
   destination_balance: nat;
   destination_rate_usd: float64;
   owner: principal;
   rate: float64;
   source: Endpoint;
   source_balance: nat;
   source_balance_available: nat;
   source_balance_tradable: nat;
   source_balance_tradable_last_update: Timestamp;
   source_rate_usd: float64;
   total_events: nat;
   unconfirmed_transactions: vec UnconfirmedTransactionShared;
 };
type DVectorRequest = 
 record {
   algo: Algo;
   destination: DestinationEndpointInput;
   source: SourceEndpointInput;
 };
type DVectorId__1 = nat32;
type DVectorId = nat32;
type ArchVectorsResult = 
 record {
   entries: vec record {
                  DVectorId;
                  DVectorShared__1;
                };
   total: nat;
 };
type Algo = variant {
              v1:
               record {
                 interval_release_usd: float64;
                 interval_seconds: nat32;
                 max: float64;
                 max_tradable_usd: float64;
                 multiplier: float64;
                 multiplier_wiggle: float64;
                 multiplier_wiggle_seconds: float64;
               };};
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : () -> Swap
