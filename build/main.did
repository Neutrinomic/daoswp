type Timestamp = nat32;
type Swap = 
 service {
   create_pipe: (PipeRequest) -> (R_1);
   get_pipe: (PipeId) -> (opt PipeShared) query;
   settle_pipes: (PipeId, PipeId) -> (R);
   update_pipe: (PipeId) -> ();
 };
type SourceEndpointInput = record {ledger: principal;};
type RateProvider = variant {xrc: record {
                                    destination: text;
                                    source: text;
                                  };};
type R_1 = 
 variant {
   err: text;
   ok: PipeId;
 };
type R = 
 variant {
   err: text;
   ok;
 };
type PipeStatus = 
 record {
   active: bool;
   destination_balance: nat;
   rate: float64;
   source_balance: nat;
 };
type PipeShared = 
 record {
   created: Timestamp;
   destination: Endpoint;
   owner: principal;
   rate: DynamicRate;
   settlement: vec PipeId__1;
   source: Endpoint;
   status: opt PipeStatus;
 };
type PipeRequest = 
 record {
   destination: DestinationEndpointInput;
   owner: principal;
   rate: DynamicRate;
   source: SourceEndpointInput;
 };
type PipeId__1 = nat64;
type PipeId = nat64;
type Endpoint = 
 record {
   address: Account;
   ledger: principal;
   ledger_decimals: nat;
   ledger_fee: nat;
   ledger_symbol: text;
 };
type DynamicRate = 
 record {
   max: float64;
   provider: RateProvider;
 };
type DestinationEndpointInput = 
 record {
   address: opt Account;
   ledger: principal;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : () -> Swap
